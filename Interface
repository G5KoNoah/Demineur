#include <SDL.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <SDL_mixer.h>
#include <SDL_image.h>
#include <SDL_ttf.h>

int size = 12;
int sizeBox = 50;


void initGrid(int* grid);
void printGridPlayer(int* gridPlayer, SDL_Renderer* renderer, SDL_Texture* tabImages[14]);
void placeBomb(int* grid, int place, int nb);
void placeNb(int* grid);
int ifBomb(int i, int* grid);
int play(int place, int* gridPlayer, int* grid);
int verifWin(int* gridPlayer, int nbBomb, int* grid);
void removePosition(int position, int* index, int* nbRemove);
void flag(int place, int* gridPlayer);
void initGridPlayer(int* gridPlayer);
int transformCoord(int x, int y);
void close(SDL_Renderer* renderer, SDL_Window* window, Mix_Music* tabMusic[3], SDL_Texture* tabImages[14]);
void loadImg(SDL_Surface* surf, SDL_Renderer* renderer, SDL_Texture* tabImages[14]);
void loadMusic(SDL_Window* window, Mix_Music* music, SDL_Renderer* renderer, Mix_Music* tabMusic[3], SDL_Texture* tabImages[14]);

int main()
{
    SDL_Window* window = NULL;
    SDL_Renderer* renderer = NULL;
    SDL_Color orange = { 255, 127, 40, 255 };
    SDL_Surface* surf = NULL;
    Mix_Music* music = NULL;
    SDL_Texture* tabImages[15];
    Mix_Music* tabMusic[3];

    int statut = EXIT_FAILURE;

    if (0 != SDL_Init(SDL_INIT_EVERYTHING))
    {
        fprintf(stderr, "Erreur SDL_Init : %s", SDL_GetError());
        close(renderer, window, tabMusic, tabImages);
    }

    window = SDL_CreateWindow("SDL2", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
        size * (sizeBox + 1), size * (sizeBox + 1), SDL_WINDOW_SHOWN);
    if (NULL == window)
    {
        fprintf(stderr, "Erreur SDL_CreateWindow : %s", SDL_GetError());
        close(renderer, window, tabMusic, tabImages);
    }

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (NULL == renderer)
    {
        fprintf(stderr, "Erreur SDL_CreateRenderer : %s", SDL_GetError());
        close(renderer, window, tabMusic, tabImages);
    }

    loadImg(surf, renderer, tabImages);

    loadMusic(window, music, renderer, tabMusic, tabImages);


    if (TTF_Init() < 0)
    {
        printf("Impossible d'initialiser SDL_ttf : %s", TTF_GetError());
        return 1;
    }


    TTF_Font* font = TTF_OpenFont("font/onePiece.ttf", 40);

    /* Si la police est nulle, il y a eu une erreur */
    if (!font)
    {
        printf("Erreur de crÃ©ation de la police : %s", TTF_GetError());
        return 1;
    }
    SDL_Color textColor = { 255, 0, 0 };
    SDL_Surface* textWin = TTF_RenderText_Solid(font, "Vous avez gagne", textColor);
    SDL_Texture* textureWin = SDL_CreateTextureFromSurface(renderer, textWin);
    SDL_Surface* textLoose = TTF_RenderText_Solid(font, "Vous avez perdu", textColor);
    SDL_Texture* textureLoose = SDL_CreateTextureFromSurface(renderer, textLoose);
    SDL_Surface* textReplay = TTF_RenderText_Solid(font, "Appuyez sur espace pour recommencer", textColor);
    SDL_Texture* textureReplay = SDL_CreateTextureFromSurface(renderer, textReplay);
    //SDL_FreeSurface(text);





    SDL_SetWindowTitle(window, "Demineur");
    SDL_RaiseWindow(window);
    statut = EXIT_SUCCESS;
    SDL_Event event;
    SDL_bool quit = SDL_FALSE;
    clock_t deltaTime = 0;

    unsigned int frames = 0;

    TTF_Font* fontMenu = TTF_OpenFont("font/onePiece.ttf", 70);

    SDL_Color textColorMenu = {0, 0, 0 };

    SDL_Surface* textMenu1 = TTF_RenderText_Solid(fontMenu, "HARD", textColorMenu);
    SDL_Texture* textureMenu1 = SDL_CreateTextureFromSurface(renderer, textMenu1);

    SDL_Surface* textMenu2 = TTF_RenderText_Solid(fontMenu, "MEDIUM", textColorMenu);
    SDL_Texture* textureMenu2 = SDL_CreateTextureFromSurface(renderer, textMenu2);

    SDL_Surface* textMenu3 = TTF_RenderText_Solid(fontMenu, "EASY", textColorMenu);
    SDL_Texture* textureMenu3 = SDL_CreateTextureFromSurface(renderer, textMenu3);

    SDL_Rect rect = { 0,0, (sizeBox * size) + size,(sizeBox * size) + size };
    SDL_Rect menu1 = { (size * sizeBox) / 3 +60,(size * sizeBox) / 2 + 100 , textMenu1->w,textMenu1->h };
    SDL_Rect menu2 = { (size * sizeBox) / 3 +30 ,(size * sizeBox) / 2 , textMenu2->w,textMenu2->h };
    SDL_Rect menu3 = { (size * sizeBox) / 3 +60 ,(size * sizeBox) / 2 -100, textMenu3->w,textMenu3->h };

    int test = 21;
    int nbBomb = 30;
    SDL_RenderCopy(renderer, tabImages[14], NULL, &rect);
    SDL_RenderCopy(renderer, textureMenu1, NULL, &menu1);
    SDL_RenderCopy(renderer, textureMenu2, NULL, &menu2);
    SDL_RenderCopy(renderer, textureMenu3, NULL, &menu3);
    SDL_RenderPresent(renderer);
    while ((SDL_PollEvent(&event) || test != 0) && !quit) {
        if (event.type == SDL_QUIT) {
            quit = SDL_TRUE;
            close(renderer, window, tabMusic, tabImages);
        }
        if (event.type == SDL_MOUSEBUTTONUP && event.button.button == SDL_BUTTON_LEFT) {
            if((size * sizeBox) / 3 + 30 < event.button.x &&
                event.button.x < (size * sizeBox) / 3 +30 + textMenu2->w &&
                (size * sizeBox) / 2 < event.button.y &&
                event.button.y < (size * sizeBox) / 2 + textMenu2->h){
                test = 0;
                size = 20;
                nbBomb = 50;
            }
            else if ((size * sizeBox) / 3 + 60 < event.button.x &&
                event.button.x < (size * sizeBox) / 3 + 60 + textMenu2->w &&
                (size * sizeBox) / 2 + 100 < event.button.y &&
                event.button.y < (size * sizeBox) / 2 + 100 + textMenu2->h) {
                test = 0;
                size = 22;
                nbBomb = 100;
                
            }else if ((size * sizeBox) / 3 + 60 < event.button.x &&
                event.button.x < (size * sizeBox) / 3 + 60 + textMenu2->w &&
                (size * sizeBox) / 2 - 100 < event.button.y &&
                event.button.y < (size * sizeBox) / 2 - 100 + textMenu2->h) {
                test = 0;
                size = 10;
                nbBomb = 15;
            }
           
        }
    }
    SDL_SetWindowSize(window,size * (sizeBox + 1), size * (sizeBox + 1));
    int* grid = malloc(sizeof(int) * (size * size));
    int* gridPlayer = malloc(sizeof(int) * (size * size));

    while (!quit)
    {
        int replay = 0;
        int anim = 0;
        Mix_PlayMusic(tabMusic[0], -1);
        int begin = SDL_GetTicks();
        initGrid(grid);
        initGridPlayer(gridPlayer);
        printGridPlayer(gridPlayer, renderer, tabImages);
        int firstRound = 0;

        while ((SDL_PollEvent(&event) || firstRound == 0) && !quit) {
            if (event.type == SDL_QUIT) {
                quit = SDL_TRUE;
                close(renderer, window, tabMusic, tabImages);
            }
            if (event.type == SDL_MOUSEBUTTONUP) {
                int place = transformCoord(event.button.x, event.button.y);
                if (event.button.button == SDL_BUTTON_LEFT) {
                    initGridPlayer(gridPlayer);
                    placeBomb(grid, place, nbBomb);
                    placeNb(grid);
                    play(place, gridPlayer, grid);
                    firstRound = 1;
                }
                else if (event.button.button == SDL_BUTTON_RIGHT) {
                    flag(place, gridPlayer);
                }
            }
            printGridPlayer(gridPlayer, renderer, tabImages);
        }
        int finish = 0;
        int explode = 0;
        finish = verifWin(gridPlayer, nbBomb, grid);
        while ((SDL_PollEvent(&event) || explode == 0 && finish == 0) && !quit) {
            if (event.type == SDL_MOUSEBUTTONUP) {
                int place = transformCoord(event.button.x, event.button.y);
                if (event.button.button == SDL_BUTTON_LEFT) {
                    explode = play(place, gridPlayer, grid);
                }
                else if (event.button.button == SDL_BUTTON_RIGHT) {
                    flag(place, gridPlayer);
                }
            }
            else if (event.type == SDL_QUIT) {
                quit = SDL_TRUE;
                close(renderer, window, tabMusic, tabImages);
            }
            if (event.type == SDL_QUIT)
                quit = SDL_TRUE;
            else if (event.type == SDL_KEYDOWN)
            {
                if (event.key.keysym.sym == SDLK_a)
                    printf("keysym A\n");
            }
            printGridPlayer(gridPlayer, renderer, tabImages);
            finish = verifWin(gridPlayer, nbBomb, grid);
        }
        
        SDL_Rect rect = { 0,0, (sizeBox * size) + size,(sizeBox * size) + size };
        SDL_Rect desrect = { (size *sizeBox)/3 ,(size * sizeBox) / 2 , textWin->w,textWin->h };
        Mix_PauseMusic(tabMusic[0]);
        if (explode == 1)
        {
            Mix_PlayMusic(tabMusic[2], -1);
            SDL_RenderCopy(renderer, tabImages[12], NULL, &rect);
            SDL_RenderCopy(renderer, textureLoose, NULL, &desrect); 
        }
        else {
            Mix_PlayMusic(tabMusic[1], -1);
            SDL_RenderCopy(renderer, tabImages[13], NULL, &rect);
            SDL_RenderCopy(renderer, textureWin, NULL, &desrect);
        }
        SDL_Rect desrect2 = { (size * sizeBox) / 8 ,(size * sizeBox) / 2 +sizeBox , textReplay->w,textReplay->h };
        SDL_RenderCopy(renderer, textureReplay, NULL, &desrect2);
        SDL_Delay(2000);
        SDL_RenderPresent(renderer);
        while ((SDL_PollEvent(&event)|| replay != 1) && !quit) {
            if (event.type == SDL_QUIT){
                quit = SDL_TRUE;
                close(renderer, window, tabMusic, tabImages);
            }   
            else if (event.type == SDL_KEYDOWN)
            {
                if (event.key.keysym.scancode == SDL_SCANCODE_SPACE)
                    replay = 1;
                else if (event.key.keysym.sym == SDLK_SPACE)
                   replay = 1;
            }
        }
        deltaTime += SDL_GetTicks() - begin;
        frames++;
        printf("%d\n", 1000 / deltaTime);
    }
    return statut;
}

void loadImg(SDL_Surface* surf, SDL_Renderer* renderer, SDL_Texture* tabImages[14]) {
    const char* pathImages[] =
    {
        "images/bomb.png",
        "images/number1.png",
        "images/number2.png",
        "images/number3.png",
        "images/number4.png",
        "images/number5.png",
        "images/number6.png",
        "images/number7.png",
        "images/number8.png",
        "images/flag1.png",
        "images/flag2.png",
        "images/flag3.png",
        "images/loose.png",
        "images/win.png",
        "images/menu.jpg"
    };

    for (int i = 0; i < 15; i++) {
        surf = IMG_Load(pathImages[i]);
        if (surf != NULL) {
            SDL_Texture* img = SDL_CreateTextureFromSurface(renderer, surf);
            tabImages[i] = img;
            SDL_FreeSurface(surf);
        }
    }

}

void loadMusic(SDL_Window* window, Mix_Music* music, SDL_Renderer* renderer, Mix_Music* tabMusic[3], SDL_Texture* tabImages[14])
{
    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, MIX_DEFAULT_CHANNELS, 0) == -1)// crÃ©ation de la configuration de la carte son
    {
        SDL_Log("Erreur initialisation SDL_mixer : %s", Mix_GetError());
        close(renderer, window, tabMusic, tabImages);
    }
    const char* pathMusic[] =
    {
        "music/overtaken.mp3",
        "music/win.mp3",
        "music/loose.mp3"
    };

    for (int i = 0; i < 3; i++) {
        music = Mix_LoadMUS(pathMusic[i]);
        if (music != NULL) {
            tabMusic[i] = music;
        }
        else
        {
            SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Erreur chargement de la musique : %s", Mix_GetError());
            close(renderer, window, tabMusic, tabImages);
        }
    }
    Mix_VolumeMusic(MIX_MAX_VOLUME / 8);
}

void initGrid(int* grid) {
    for (int i = 0; i < size * size; i++) {
        grid[i] = 33;
    }
}

void initGridPlayer(int* gridPlayer) {
    for (int i = 0; i < size * size; i++) {
        gridPlayer[i] = 33;
    }
}

int transformCoord(int x, int y) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (i + (sizeBox * i) < x && x < (i + (sizeBox * i)) + sizeBox && j + (sizeBox * j) < y && y < (j + (sizeBox * j)) + sizeBox) {
                return i * size + j;
            }
        }
    }
    return -1;
}


void printGridPlayer(int* gridPlayer, SDL_Renderer* renderer, SDL_Texture* tabImages[14]) {



    SDL_Color blue1 = { 34, 170, 212, 255 };
    SDL_Color blue2 = { 84, 107, 199, 255 };
    SDL_Color yellow1 = { 140, 130, 0, 255 };
    SDL_Color yellow2 = { 170, 160, 0, 255 };
    SDL_Color red = { 255, 0, 0, 255 };
    SDL_Texture* img = NULL;
    int count = size * size;

    for (int i = 0; i < count; i++) {
        SDL_Rect rect = { i / size + (i / size * sizeBox), i % size + (i % size * sizeBox), sizeBox,sizeBox };
        if (gridPlayer[i] == 33) {
            if ((i / size) % 2 == 0) {
                if (i % 2 == 0) {
                    SDL_SetRenderDrawColor(renderer, blue1.r, blue1.g, blue1.b, blue1.a);
                }
                else {
                    SDL_SetRenderDrawColor(renderer, blue2.r, blue2.g, blue2.b, blue2.a);
                }
            }
            else {
                if (i % 2 == 0) {
                    SDL_SetRenderDrawColor(renderer, blue2.r, blue2.g, blue2.b, blue2.a);
                }
                else {
                    SDL_SetRenderDrawColor(renderer, blue1.r, blue1.g, blue1.b, blue1.a);
                }
            }

        }
        else if (gridPlayer[i] == 66) {
            img = tabImages[0];
        }
        else if (gridPlayer[i] == 55) {
            SDL_SetRenderDrawColor(renderer, red.r, red.g, red.b, red.a);
            int index = SDL_GetTicks() % 400;
            if (0 < index && index < 200) {
                img = tabImages[9];
            }
            else {
                img = tabImages[11];
            }

        }
        else {
            if ((i / size) % 2 == 0) {
                if (i % 2 == 0) {
                    SDL_SetRenderDrawColor(renderer, yellow1.r, yellow1.g, yellow1.b, yellow1.a);
                }
                else {
                    SDL_SetRenderDrawColor(renderer, yellow2.r, yellow2.g, yellow2.b, yellow2.a);
                }
            }
            else {
                if (i % 2 == 0) {
                    SDL_SetRenderDrawColor(renderer, yellow2.r, yellow2.g, yellow2.b, yellow2.a);
                }
                else {
                    SDL_SetRenderDrawColor(renderer, yellow1.r, yellow1.g, yellow1.b, yellow1.a);
                }
            }
            if (gridPlayer[i] == 1) {
                img = tabImages[1];
            }
            else if (gridPlayer[i] == 2) {
                img = tabImages[2];

            }
            else if (gridPlayer[i] == 3) {
                img = tabImages[3];
            }
            else if (gridPlayer[i] == 4) {
                img = tabImages[4];
            }
            else if (gridPlayer[i] == 5) {
                img = tabImages[5];
            }
            else if (gridPlayer[i] == 6) {
                img = tabImages[6];
            }
            else if (gridPlayer[i] == 7) {
                img = tabImages[7];
            }
            else if (gridPlayer[i] == 8) {
                img = tabImages[8];
            }
        }
        SDL_RenderFillRect(renderer, &rect);
        if (img != NULL) {
            SDL_RenderCopy(renderer, img, NULL, &rect);
            img = NULL;
        }
    }
    SDL_RenderPresent(renderer);
    SDL_RenderClear(renderer);
}

void placeBomb(int* grid, int place, int nb) {
    int* index = malloc(sizeof(int) * (size * size));
    for (int i = 0; i < size * size; i++) {
        index[i] = i;
    }
    int nbRemove = 1;
    int lastPosition = place;

    removePosition(place + size + 1, index, &nbRemove);
    removePosition(place + size, index, &nbRemove);
    removePosition(place + size - 1, index, &nbRemove);
    removePosition(place + 1, index, &nbRemove);
    removePosition(place, index, &nbRemove);
    removePosition(place - 1, index, &nbRemove);
    removePosition(place - size + 1, index, &nbRemove);
    removePosition(place - size, index, &nbRemove);
    removePosition(place - size - 1, index, &nbRemove);

    for (int i = 0; i < nb; i++) {
        int ind = rand() % (size * size - (i + 9));
        int position = index[ind];
        removePosition(ind, index, &nbRemove);
        grid[position] = 66;
    }
}

void removePosition(int position, int* index, int* nbRemove) {
    int lenght = (size * size) - *nbRemove;
    if (position >= 0 && position < size * size) {
        for (int j = position; j < lenght; j++) {
            index[j] = index[j + 1];
        }
        ++* nbRemove;
    }
}

void placeNb(int* grid) {
    for (int i = 0; i < size * size; i++) {

        if (grid[i] != 66) {
            int nb = 0;
            if (i % size == 0) {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i + 1, grid);
                nb += ifBomb((i - size) + 1, grid);
                nb += ifBomb((i + size) + 1, grid);
            }
            else if (i % size == size - 1) {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i - 1, grid);
                nb += ifBomb((i - size) - 1, grid);
                nb += ifBomb((i + size) - 1, grid);
            }
            else {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i + 1, grid);
                nb += ifBomb((i - size) + 1, grid);
                nb += ifBomb((i + size) + 1, grid);
                nb += ifBomb(i - 1, grid);
                nb += ifBomb((i - size) - 1, grid);
                nb += ifBomb((i + size) - 1, grid);
            }
            grid[i] = nb;
        }
    }
}

int ifBomb(int i, int* grid) {
    int nbBomb = 0;
    if (i >= 0 && i < size * size) {
        if (grid[i] == 66) {
            nbBomb = 1;
        }
    }
    return nbBomb;
}

int play(int place, int* gridPlayer, int* grid) {
    if (gridPlayer[place] == 33) {

        gridPlayer[place] = grid[place];

        if (grid[place] == 66) {
            for (int i = 0; i < size * size; i++) {
                if (grid[i] == 66 && gridPlayer[i] != 55) {
                    gridPlayer[i] = grid[i];
                }
            }
            return 1;
        }
        else if (grid[place] == 0) {
            if (place % size == 0) {

                play(place + size, gridPlayer, grid);
                play(place - size, gridPlayer, grid);
                play(place + 1, gridPlayer, grid);
                play(place + size + 1, gridPlayer, grid);
                play(place - size + 1, gridPlayer, grid);

            }
            else if (place % size == size - 1) {
                play(place + size, gridPlayer, grid);
                play(place - size, gridPlayer, grid);
                play(place - 1, gridPlayer, grid);
                play(place + size - 1, gridPlayer, grid);
                play(place - size - 1, gridPlayer, grid);
            }
            else {
                play(place + size, gridPlayer, grid);
                play(place - size, gridPlayer, grid);
                play(place + 1, gridPlayer, grid);
                play(place - 1, gridPlayer, grid);
                play(place + size + 1, gridPlayer, grid);
                play(place - size + 1, gridPlayer, grid);
                play(place + size - 1, gridPlayer, grid);
                play(place - size - 1, gridPlayer, grid);
            }
        }
    }
    return 0;
}

void flag(int place, int* gridPlayer) {
    if (gridPlayer[place] == 33) {
        gridPlayer[place] = 55;
    }
    else if (gridPlayer[place] == 55) {
        gridPlayer[place] = 33;
    }
}

int verifWin(int* gridPlayer, int nbBomb, int* grid) {
    int count = 0;
    for (int i = 0; i < size * size; i++) {
        if (gridPlayer[i] == 33) {
            count++;
        }
        else if (gridPlayer[i] == 55 && grid[i] == 66) {
            count++;
        }
    }
    if (count == nbBomb) {
        return 1;
    }
    return 0;
}


void close(SDL_Renderer* renderer, SDL_Window* window, Mix_Music* tabMusic[3], SDL_Texture* tabImages[14]) {
    if (NULL != renderer)
        SDL_DestroyRenderer(renderer);
    if (NULL != window)
        SDL_DestroyWindow(window);
    for (int i = 0; i < 3; i++) {
        if (NULL != tabMusic[i])
            Mix_FreeMusic(tabMusic[i]);
    }
    for (int i = 0; i < 14; i++) {
        if (NULL != tabImages[i])
            SDL_DestroyTexture(tabImages[i]);
    }
    Mix_CloseAudio();
    SDL_Quit();
}
