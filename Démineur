#include <stdio.h>
#include <time.h>

#define size 10

void initGrid(int grid[size * size]);
void initGridPlayer(int gridPlayer[size * size]);
void printGridPlayer(int gridPlayer[size * size]);
void placeBomb(int grid[size * size], int place, int nb);
void placeNb(int grid[size * size]);
int ifBomb(int i, int grid[size * size]);
int play(char choice, int place, int gridPlayer[size * size], int grid[size * size]);
void inputFlag(char *choice);
void inputCase(int *line, int *column);
int verifWin(int gridPlayer[size * size], int nbBomb, int grid[size * size]);
void inputNbBomb(int *nbBomb);

int main() {
  int grid[size * size];
  int gridPlayer[size * size];
  initGrid(grid);
  initGridPlayer(gridPlayer);
  printGridPlayer(gridPlayer);

  /** Creation grille + 1er round**/

  int nbBomb;
  inputNbBomb(&nbBomb);
  char choice = 'C';
  int line;
  int column;
  inputCase(&line, &column);
  int place = (line - 1) + (column - 1) * size;
  placeBomb(grid, place, nbBomb);
  placeNb(grid);
  play(choice, place, gridPlayer, grid);
  printGridPlayer(gridPlayer);
  int finish = 0;
  int explode = 0;
  finish = verifWin(gridPlayer, nbBomb, grid);

  while (explode == 0 && finish == 0) {
    inputFlag(&choice);
    inputCase(&line, &column);
    int place = (line - 1) + (column - 1) * size;
    explode = play(choice, place, gridPlayer, grid);
    if(choice=='E' && gridPlayer[place]==55)
    {
      gridPlayer[place]=33;
    }
    printGridPlayer(gridPlayer);
    if (gridPlayer[place] != 33) {
      printf("Case d√©j√† d√©couverte !!");
      printf("\n");
    }
    if(choice=='E' && gridPlayer[place]!=55)
    {
      printf("Ce n'est pas un drapeau !!");
      printf("\n");
    }
    finish = verifWin(gridPlayer, nbBomb, grid);
  }
  if (explode == 1) {
    printf("T'as Perdu !!!");
  } else {
    printf("T'as Gagn√© Bravo !!!!!!");
  }
}

void initGrid(int grid[size * size]) {
  for (int i = 0; i < size * size; i++) {
    grid[i] = 33;
  }
}

void initGridPlayer(int gridPlayer[size * size]) {
  for (int i = 0; i < size * size; i++) {
    gridPlayer[i] = 33;
  }
}

void printGridPlayer(int gridPlayer[size * size]) {
  if (system("cls"))system("clear");
  printf("     ");
  for (int y = 1; y < size + 1; y++) {
    printf("%d", y);
    printf("  ");
  }
  printf("\n");
  printf("    ");
  for (int y = 1; y < size + 1; y++) {
    printf("---");
  }
  printf("\n");

  int count = size * size;
  for (int i = 0; i < count; i++) {
    if (i == 0) {
      printf(" 1");
      printf(" ");
      printf("|");
    }
    if (i % size == 0 && i != 0) {

      printf("\n");
      printf((i / size == size - 1) ? "%d" : " %d", i / size + 1);
      printf(" ");
      printf("|");
    }
    if (gridPlayer[i] == 33) {
      printf("\033[0m");
      printf(" . ");
    } else if (gridPlayer[i] == 66) {
      printf("\033[0;30m");
      printf(" %s", "üí£");
    } else if (gridPlayer[i] == 55) {
      printf(" %s", "üö©");
    } else if (gridPlayer[i] == 0) {
      printf("   ");
    } else {
      if (gridPlayer[i] == 1) {
        printf("\033[0;34m");
      } else if (gridPlayer[i] == 2) {
        printf("\033[0;32m");
      } else if (gridPlayer[i] == 3) {
        printf("\033[0;31m");
      } else if (gridPlayer[i] == 4) {
        printf("\033[0;35m");
      } else {
        printf("\033[0;33m");
      }
      printf(" %d ", gridPlayer[i]);
    }
    printf("\033[0m");
  }

  printf("\n\n");
}

void placeBomb(int grid[size * size], int place, int nb) {
  int nbBomb = 0;
  srand(time(NULL));

  while (nbBomb < nb) {
    int position = rand() % (size * size);

    if (ifBomb(position, grid) == 0 && position != place &&
        position != place + 1 && position != place - 1 &&
        position != place - size - 1 && position != place - size + 1 &&
        position != place + size - 1 && position != place + size + 1 &&
        position != place - size && position != place + size) {
      grid[position] = 66;
      nbBomb++;
    }
  }
}

void placeNb(int grid[size * size]) {
  for (int i = 0; i < size * size; i++) {

    if (grid[i] != 66) {
      int nb = 0;
      if (i % size == 0) {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i + 1, grid);
        nb += ifBomb((i - size) + 1, grid);
        nb += ifBomb((i + size) + 1, grid);
      } else if (i % size == size - 1) {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i - 1, grid);
        nb += ifBomb((i - size) - 1, grid);
        nb += ifBomb((i + size) - 1, grid);
      } else {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i + 1, grid);
        nb += ifBomb((i - size) + 1, grid);
        nb += ifBomb((i + size) + 1, grid);
        nb += ifBomb(i - 1, grid);
        nb += ifBomb((i - size) - 1, grid);
        nb += ifBomb((i + size) - 1, grid);
      }
      grid[i] = nb;
    }
  }
}

int ifBomb(int i, int grid[size * size]) {
  int nbBomb = 0;
  if (i >= 0 && i < 100) {
    if (grid[i] == 66) {
      nbBomb = 1;
    }
  }
  return nbBomb;
}

int play(char choice, int place, int gridPlayer[size * size], 
         int grid[size * size]) {
  if (gridPlayer[place] == 33) {
    if (choice != 'D') {
      gridPlayer[place] = grid[place];
      
      if (grid[place] == 66) {
        for (int i = 0; i < size * size; i++) {
          if (grid[i] == 66 && gridPlayer[i] != 55) {
            gridPlayer[i] = grid[i];
          }
        }
        return 1;
      } else if (grid[place] == 0) {
        if (place % size == 0) {

          play(choice, place + size, gridPlayer, grid);
          play(choice, place - size, gridPlayer, grid);
          play(choice, place + 1, gridPlayer, grid);
          play(choice, place + size + 1, gridPlayer, grid);
          play(choice, place - size + 1, gridPlayer, grid);

        } else if (place % size == size - 1) {
          play(choice, place + size, gridPlayer, grid);
          play(choice, place - size, gridPlayer, grid);
          play(choice, place - 1, gridPlayer, grid);
          play(choice, place + size - 1, gridPlayer, grid);
          play(choice, place - size - 1, gridPlayer, grid);
        } else {
          play(choice, place + size, gridPlayer, grid);
          play(choice, place - size, gridPlayer, grid);
          play(choice, place + 1, gridPlayer, grid);
          play(choice, place - 1, gridPlayer, grid);
          play(choice, place + size + 1, gridPlayer, grid);
          play(choice, place - size + 1, gridPlayer, grid);
          play(choice, place + size - 1, gridPlayer, grid);
          play(choice, place - size - 1, gridPlayer, grid);
        }
      }
    } else {
      gridPlayer[place] = 55;
    }
  }
  return 0;
}

void inputNbBomb(int *nbBomb) {
  printf("Combien de bombes voulez avoir √† chercher (entre 1 et 91): ");
  scanf("%d", nbBomb);
  while (getchar() != '\n');
  while (*nbBomb < 1 || *nbBomb > 91) {
    printf("Un Nombres de bombes entre 1 et 91: ");
    scanf("%d", nbBomb);
    while (getchar() != '\n');
  }
}

void inputFlag(char *choice) {
  printf("Veux tu mettre un drapeau (D), en enlever un (E) ou d√©couvrir une case (C): ");
  scanf("%c", choice);
  while (getchar() != '\n')
    ;
  while (*choice != 'D' && *choice != 'C' && *choice != 'E') {
    printf("Drapeau -> D Supprimer Drapeau -> E Case -> C: ");
    scanf("%c", choice);
    while (getchar() != '\n')
      ;
  }
}

void inputCase(int *line, int *column) {
  printf("Entrer la position que vous souhaiter (ex : 2 8): ");
  scanf("%d%d", line, column);
  while (getchar() != '\n')
    ;
  while (*line < 1 || *line > size || *column < 1 || *column > size) {
    printf("Entrer une position valide (ex : 2 8): ");
    scanf("%d%d", line, column);
    while (getchar() != '\n')
      ;
  }
}

int verifWin(int gridPlayer[size * size], int nbBomb, int grid[size * size]) {
  int count = 0;
  for (int i = 0; i < size * size; i++) {
    if (gridPlayer[i] == 33) {
      count++;
    } else if (gridPlayer[i] == 55 && grid[i] == 66) {
      count++;
    }
  }
  if (count == nbBomb) {
    return 1;
  }
  return 0;
}
