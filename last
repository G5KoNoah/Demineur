#include <stdio.h>
#include <time.h>

#define size 10

void initGrid(int grid[size * size]);
void initGridPlayer(int gridPlayer[size * size]);
void printGridPlayer(int gridPlayer[size * size]);
void placeBomb(int grid[size * size], int place, int nb);
void placeNb(int grid[size * size]);
int ifBomb(int i, int grid[size * size]);
int play(int place, int gridPlayer[size * size], int grid[size * size]);

int main() {

    int grid[size * size];
    int gridPlayer[size * size];
    initGrid(grid);
    initGridPlayer(gridPlayer);
    printGridPlayer(gridPlayer);
    
    /** Creation grille + 1er round**/
    
    int nbBomb;
    printf("Combien de bombes voulez avoir à chercher : ");
    scanf("%d", &nbBomb);
    int line;
    int column;
    printf("Entrer la position que vous souhaiter découvrir (ex : 2 8): ");
    scanf("%d%d", &line, &column);
    int place = (line - 1) + (column - 1) * size;
    placeBomb(grid, place, nbBomb);
    placeNb(grid);
    play(place, gridPlayer, grid);
    printGridPlayer(gridPlayer);

    int explode = 0;
    
    while (explode != 1) {
        printf("Entrer la position que vous souhaiter découvrir (ex : 2 8): ");
        scanf("%d%d", &line, &column);
        int place = (line - 1) + (column - 1) * size;
        explode = play(place, gridPlayer, grid);
        printGridPlayer(gridPlayer);
    }
    printf("loser");
    
}

void initGrid(int grid[size * size]) {
    for (int i = 0; i < size * size; i++) {
        grid[i] = 33;
    }
}

void initGridPlayer(int gridPlayer[size * size]) {
    for (int i = 0; i < size * size; i++) {
        gridPlayer[i] = 33;
    }
}

void printGridPlayer(int gridPlayer[size * size]) {
    printf("   ");
    for (int y = 1; y < 10; y++) {
        printf("%d", y);
        printf("  ");
    }
    printf("\n");

    int count = size * size;
    for (int i = 0; i < count; i++) {
        if (i == 0)
        {
            printf(" 1");
        }
        if (i % size == 0 && i != 0) {
            printf("\n");
            printf((i / size == 9) ? "%d" : " %d", i / size + 1);
        }
        if (gridPlayer[i] == 33) {
            printf("\033[0m");
            printf(" . ");
        }
        else if (gridPlayer[i] == 66) {
            printf("\033[0;30m");
            printf(" B ");
        }
        else if (gridPlayer[i] == 55) {
            printf(" D ");
        }
        else if (gridPlayer[i] == 0) {
          printf("   ");
        }
        else {
            if (gridPlayer[i] == 1) {
                printf("\033[0;34m");
            }
            else if (gridPlayer[i] == 2) {
                printf("\033[0;32m");
            }
            else if (gridPlayer[i] == 3) {
                printf("\033[0;31m");
            }
            else if (gridPlayer[i] == 4) {
                printf("\033[0;35m");
            }
            else {
                printf("\033[0;33m");
            }
            printf(" %d ", gridPlayer[i]);
        }
    }

    printf("\033[0m");
    printf("\n\n");

}

void placeBomb(int grid[size * size], int place, int nb) {
    int nbBomb = 0;
    srand(time(NULL));

    while (nbBomb < nb) {
        int position = rand() % (size * size);

        if (ifBomb(position, grid) == 0 && position != place &&
            position != place + 1 && position != place - 1 &&
            position != place - size - 1 && position != place - size + 1 &&
            position != place + size - 1 && position != place + size + 1 &&
            position != place - size && position != place + size) {
            grid[position] = 66;
            nbBomb++;
        }
    }
}

void placeNb(int grid[size * size]) {
    for (int i = 0; i < size * size; i++) {

        if (grid[i] != 66) {
            int nb = 0;
            if (i % size == 0) {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i + 1, grid);
                nb += ifBomb((i - size) + 1, grid);
                nb += ifBomb((i + size) + 1, grid);
            }
            else if (i % size == size - 1) {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i - 1, grid);
                nb += ifBomb((i - size) - 1, grid);
                nb += ifBomb((i + size) - 1, grid);
            }
            else {
                nb += ifBomb(i + size, grid);
                nb += ifBomb(i - size, grid);
                nb += ifBomb(i + 1, grid);
                nb += ifBomb((i - size) + 1, grid);
                nb += ifBomb((i + size) + 1, grid);
                nb += ifBomb(i - 1, grid);
                nb += ifBomb((i - size) - 1, grid);
                nb += ifBomb((i + size) - 1, grid);
            }
            grid[i] = nb;
        }
    }
}

int ifBomb(int i, int grid[size * size]) {
    int nbBomb = 0;
    if (i > 0 && i < 100) {
        if (grid[i] == 66) {
            nbBomb = 1;
        }
    }
    return nbBomb;
}

int play(int place, int gridPlayer[size * size], int grid[size * size]) {
    gridPlayer[place] = grid[place];
    if (grid[place] == 66)
    {
        return 1;
    }
    else if(grid[place] == 0)
    {
      if (place % size == 0) {
          play(place + size, gridPlayer, grid);
          play(place - size, gridPlayer, grid);
          play(place + 1, gridPlayer, grid);
          play((place - size) + 1, gridPlayer, grid);
          play((place + size) + 1, gridPlayer, grid);
      }
      else if (place % size == size - 1) {
          play(place + size, gridPlayer, grid);
          play(place- size, gridPlayer, grid);
          play(place - 1, gridPlayer, grid);
          play((place - size) - 1, gridPlayer, grid);
          play((place + size) - 1, gridPlayer, grid);
      }
      else {
          play(place + size, gridPlayer, grid);
          play(place - size, gridPlayer, grid);
          play(place + 1, gridPlayer, grid);
          play((place - size) + 1, gridPlayer, grid);
          play((place + size) + 1, gridPlayer, grid);
          play(place - 1, gridPlayer, grid);
          play((place - size) - 1, gridPlayer, grid);
          play((place + size) - 1, gridPlayer, grid);
      }
    }
    return 0;
}
  
