#include<stdio.h>
#include <time.h>

#define size 10
typedef struct bomb
{
	int position;
}Bomb;

void initGrid(int grid[size * size]);
void printGrid(int grid[size * size]);
void placeBomb(int grid[size * size], int place, int nb);
void placeNb(int grid[size * size]);
int ifBomb(int i, int grid[size * size]);


int main()
{
	int grid[size * size];
	initGrid(grid);
	printGrid(grid);
  int nbBomb;
  printf("Combien de bombes voulez avoir à chercher : ");
  scanf("%d", &nbBomb);
  int line;
  int column;
  printf("Entrer la position que vous souhaiter découvrir (ex : 2 8): ");
  scanf("%d%d", &line, &column);
  int place = (line - 1) + (column - 1) * size;
  
  placeBomb(grid, place, nbBomb);
  printGrid(grid);
  placeNb(grid);
  printGrid(grid);
};

void initGrid(int grid[size * size])
{
	for (int i = 0; i < size*size; i++)
	{
		grid[i] = 33;
	};
};

void printGrid(int grid[size * size])
{
	for (int i = 0; i < size * size; i++)
	{
		if (i % size == 0 && i != 0)
		{
			printf("\n");
		}
    if(grid[i]==33)
    {
      printf(" . ");
    }
    else if(grid[i] == 66)
    {
      printf(" B ");
    }
    else if(grid[i] == 55)
    {
      printf(" D ");
    }
    else if(grid[i] == 0)
    {
      printf("   ");
    }
    else
    {
      printf(" %d ", grid[i]);
    }
	};
	printf("\n\n");
};

void placeBomb(int grid[size * size], int place, int nb)
{
	int nbBomb = 0;
	srand(time(NULL));

	while (nbBomb < nb)
	{
		int position = rand() % ( size * size + 1 );
    
		if (ifBomb(position, grid) == 0 && position != place &&
        position != place + 1 && position != place - 1 && 
        position != place - size - 1 && position != place - size + 1 &&
        position != place +  size - 1 && position != place + size + 1 && 
        position != place - size && position != place + size)
		{
			grid[position] = 66;
			nbBomb++;
		};
	};
};

void placeNb(int grid[size * size])
{
	for (int i = 0; i < size * size; i++)
	{
		
		if (grid[i] != 66)
		{
      int nb = 0;
      if (i % size == 0)
      {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i + 1, grid);
        nb += ifBomb((i - size) + 1, grid);
        nb += ifBomb((i + size) + 1, grid);
      }
      else if(i % size == size - 1)
      {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i - 1, grid);
        nb += ifBomb((i - size) - 1, grid);
        nb += ifBomb((i + size) - 1, grid);
      }
      else
      {
        nb += ifBomb(i + size, grid);
        nb += ifBomb(i - size, grid);
        nb += ifBomb(i + 1, grid);
        nb += ifBomb((i - size) + 1, grid);
        nb += ifBomb((i + size) + 1, grid);
        nb += ifBomb(i - 1, grid);
        nb += ifBomb((i - size) - 1, grid);
        nb += ifBomb((i + size) - 1, grid);
      };
      grid[i] = nb;
		};
	};
};

int ifBomb(int i, int grid[size * size])
{
	int nbBomb = 0;
	if (i > 0 && i < 100)
	{
		if (grid[i] == 66)
		{
			nbBomb = 1;
		};
	};
	return nbBomb;

}

